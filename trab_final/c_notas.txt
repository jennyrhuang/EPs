/*
 ESTRUTURA DE DADOS - Trabalho final
 Autor: Jennifer Ruei Huang
 Data: 07/02/2022

Crie um programa em C para coleta e cálculo final de notas de alunos.A quantidade de alunos e de avaliações deve ser coletada no início da execução. Os dados deverão ser armazenados utilizando alocação dinâmica de memória.*/

    
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main()   
{
    int qtd_aluno, qtd_avaliacao;  
    printf("\nQuantidade de alunos: ");
    scanf("%d", &qtd_aluno);
    printf ("Numero de avaliacoes: ");
    scanf("%d", &qtd_avaliacao);
    
    // Cria um ponteiro quue apontará para endereços. 
    int* pt = (int*) malloc(qtd_aluno * sizeof(int) * qtd_avaliacao); 
    
    // Passa por todos os alunos de cada avaliacao e pega sua nota. 
    for(int i = 0; i < qtd_avaliacao; i++){ 
        printf("\n---\n");
        printf("Avalicao %d\n", i+1);
        for(int j = 0; j < qtd_aluno; j++){
            printf("%d > ", j+1);
            scanf("%d", &pt[i * qtd_aluno + j]);
        }
    }

    // Faz a média de cada aluno, pegando a nota das avaliações dele. 
    printf("\nResultado final \nMédias arredondadas para cima dos alunos: \n");
    for(int aluno=0; aluno < qtd_aluno; aluno++){
        float contagem = 0;
        for(int av=0; av < qtd_avaliacao; av++){
            contagem += pt[av * qtd_aluno + aluno];
        }
        printf("%d > %d \n", aluno+1, (int)ceil(contagem / qtd_avaliacao));
    }

    printf("\nMédia e desvio padrão (populacional) das avaliações:\n");

    // Cria outro ponteiro e calcula a média e o desvio padrão das notas em cada avaliação. 
    int* pt_med_av = (int*) malloc(qtd_avaliacao * sizeof(int));
    for(int av=0; av < qtd_avaliacao; av++){
        float contagem = 0;
        for(int aluno =0; aluno < qtd_aluno; aluno++){
            contagem += pt[av * qtd_aluno + aluno]; 
        }
        pt_med_av[av] = contagem / qtd_aluno;

        float desvio = 0;
        for(int aluno=0; aluno < qtd_aluno; aluno++){
            desvio += pow(pt[av * qtd_aluno + aluno] - pt_med_av[av], 2);

        }

        printf("av %d.\t%d\t%.2f \n", av+1, pt_med_av[av], sqrt(desvio / qtd_aluno));

    }


    return 0;
}
